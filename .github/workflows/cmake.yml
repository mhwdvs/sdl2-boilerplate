name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install linux dependencies
      run: |
        sudo apt-get update
        sudo apt-get install build-essential git make cmake autoconf automake \
        libtool pkg-config libasound2-dev libpulse-dev libaudio-dev libjack-dev \
        libx11-dev libxext-dev libxrandr-dev libxcursor-dev libxi-dev \
        libxinerama-dev libxxf86vm-dev libxss-dev libgl1-mesa-dev libdbus-1-dev \
        libudev-dev libgles2-mesa-dev libegl1-mesa-dev libibus-1.0-dev \
        fcitx-libs-dev libsamplerate0-dev libsndio-dev libwayland-dev \
        libxkbcommon-dev libdrm-dev libgbm-dev

    - name: Install Doxygen
      run: sudo apt install doxygen
      
    - name: Install graphviz
      run: sudo apt install graphviz
      
    - name: Install Valgrind
      run: sudo apt install valgrind

    - name: Clone Submodules
      run: git submodule init && git submodule update

    - name: Build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake -S . -B build

    - name: Test
      working-directory: build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE
       
    - name: Valgrind
      working-directory: build/src
      shell: bash
      run: printf "User input here\n" | valgrind --error-exitcode=1 "./Main"

  Cppcheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install Cppcheck
        run: sudo apt install cppcheck

      - name: Run Cppcheck
        working-directory: ${{github.workspace}}
        shell: bash
        run: cppcheck src/ --enable=all --error-exitcode=1
